scalar ObjectId

interface BaseResponse {
    message: String!
    statusCode: Int!
}

enum GameValue {
    X
    O
}

enum Winner {
    X
    O
    DRAWN
}

type Score {
    rowIndex: Int,
    colIndex: Int,
    value: GameValue
}

input ScoreInput {
    rowIndex: Int!,
    colIndex: Int!,
    value: GameValue!
}

type Game {
    uid: String,
    scores: [Score],
    winner: Winner
}

type GameLog {
    gameUid: String,
    value: String,
    rowIndex: Int,
    colIndex: Int
}

input FilterGameInput {
    uid: String!
}

input PaginationInput {
    limit: Int!
    skip: Int!
}

type GameResponse implements BaseResponse {
    statusCode: Int!
    message: String!
    result: Game
}

type GameLogResponse implements BaseResponse {
    statusCode: Int!
    message: String!
    result: [GameLog]
}

type Query {
    game (uid: String!): GameResponse,
    gameLogs (gameUid: String! pagination: PaginationInput): GameLogResponse
}

type Mutation {
    createGame (score: ScoreInput!): GameResponse
    updateGame (uid: String! score: ScoreInput!): GameResponse 
}

schema {
    query: Query
    mutation: Mutation
}